const int base = 30;
const int N = 1e5 + 10;
int n;
string s;
int hash_arr[N];
int suffix_hash_arr[N];
int pw[N];
int inv[N];
int add(int x, int y){
    int res = (x + y) % mod;
    if (res < 0) res += mod;
    return res;
}
int mul(int x, int y){
    int res = (x * 1LL * y) % mod;
    if (res < 0) res += mod;
    return res;
}
int bin_exp(int x, int y){
    int res = 1;
    while (y){
        if (y & 1){
            res = mul(res, x);
        }
        y >>= 1;
        x = mul(x, x);
    }
    return res;
}
void pre_calc_power(){
    pw[0] = 1;
    for (int i = 1; i < N; ++ i){
        pw[i] = mul(pw[i - 1], base);
    }
    int inv_val = bin_exp(base, mod - 2);
    inv[0] = 1;
    for (int i = 1; i < N; ++ i){
        inv[i] = mul(inv[i - 1], inv_val);
    }
}
void prefix_hash(){
    pre_calc_power();
    fr(i, n){
        hash_arr[i] = add(i ? hash_arr[i - 1] : 0, mul(s[i] - 'a' + 1, pw[i]));
    }
    for (int i = n - 1; i >= 0; -- i){
        suffix_hash_arr[i] = add(i != n - 1 ? suffix_hash_arr[i + 1] : 0, mul(s[i] - 'a' + 1, pw[n - 1 - i]));
    }
}
int get_hash(int i, int j){
    int res = add(hash_arr[j], i ? -hash_arr[i - 1] : 0);
    return mul(res, inv[i]);
}
int get_rev_hash(int i, int j){
    int res = add(suffix_hash_arr[i], j != n - 1 ? -suffix_hash_arr[j + 1] : 0);
    return mul(res, inv[n - j - 1]);
}
